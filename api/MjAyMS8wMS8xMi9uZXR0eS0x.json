{"title":"netty-1","date":"2021-01-12T13:10:00.000Z","date_formatted":{"ll":"Jan 12, 2021","L":"01/12/2021","MM-DD":"01-12"},"link":"2021/01/12/netty-1","tags":["java","netty"],"updated":"2021-01-17T04:36:38.907Z","content":"<h3 id=\"什么是netty\">什么是Netty<a title=\"#什么是netty\" href=\"#什么是netty\"></a></h3>\n<p><a href=\"https://netty.io/\" target=\"_blank\">Netty</a> 是一个开源的网络编程框架，Netty 封装了 Java 的 NIO 和 OIO，简化了java网络编程。可以让开发者快速的上手网络编程<br>\n由于 NIO 使用 Reactor 模式来设计，可以高效的处理网络请求。而 Netty 是对 NIO 的进一步封装和简化，所以 Netty 也是 Reactor 模式。</p>\n<blockquote>\n<p>Reactor 是一种广泛应用在服务器端开发的设计模式。是为了节省 CPU 的性能，不让 CPU 因为读取网络 IO 里面的数据而阻塞。一般的实现方式是注册一个回调<br>\n的实例(Handler)，然后由一个单独的线程不断的去检查 IO 操作是否就，如果就绪之后就会通知对应的 Handler 来处理。</p>\n</blockquote>\n<h3 id=\"最简单的一个例子\">最简单的一个例子<a title=\"#最简单的一个例子\" href=\"#最简单的一个例子\"></a></h3>\n<p><code>本例子中会使用netty实现可以接收请求并且响应消息的服务端</code></p>\n<h4 id=\"创建服务端\">创建服务端<a title=\"#创建服务端\" href=\"#创建服务端\"></a></h4>\n<ul>\n<li>启动类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.java.netty.simple.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">9999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建监听线程，这个线程池会用来监听连接到客户端的连接，</span></span><br><span class=\"line\">        NioEventLoopGroup nioEventLoopGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        <span class=\"comment\">// 创建工作线程，用来处理具体的请求</span></span><br><span class=\"line\">        NioEventLoopGroup workEventLoopGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        <span class=\"comment\">// 创建服务端的引导</span></span><br><span class=\"line\">        ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">        ChannelFuture sync = serverBootstrap.group(nioEventLoopGroup, workEventLoopGroup)</span><br><span class=\"line\">                .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                        ch.pipeline().addLast(<span class=\"keyword\">new</span> SimpleServerHandler());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .bind(PORT).addListener(future -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (future.isSuccess()) &#123;</span><br><span class=\"line\">                        log.info(<span class=\"string\">&quot;端口&#123;&#125;绑定成功&quot;</span>, PORT);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).sync();</span><br><span class=\"line\">        sync.channel().closeFuture().sync();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>服务端处理类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.java.netty.simple.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.java.netty.Constants.UTF_8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务端处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在不加管道的情况下，默认的对象都是ByteBuf</span></span><br><span class=\"line\">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;服务器接收到:&#123;&#125;&quot;</span>, byteBuf.toString(UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试服务是否正常<br>\n使用<code>telnet</code>命令可以测试一个端口是否有应用活动，运行<code>main</code>方法，结果如下</li>\n</ul>\n<img src=\"/.red//01/12/netty-1/2018-11-14-netty-server-1.png\" class title=\"应用启动\">\n<img src=\"/.red//01/12/netty-1/2018-11-14-netty-server-2.png\" class title=\"telnet测试\">\n<img src=\"/.red//01/12/netty-1/2018-11-14-netty-server-3.png\" class title=\"服务器结果\">\n<p>可以看到，服务端已经接收到了我们输入的内容。这就是使用netty创建的一个最简单的服务端,只需要十几行代码就可以实现网络编程的基础功能。</p>\n<p>源码地址: <a href=\"https://github.com/g5niusx/netty-demo/tree/master/src/main/java/com/java/netty/simple\" target=\"_blank\">netty-demo</a></p>\n","prev":{"title":"Hello World","link":"2021/01/17/hello-world"},"plink":"http://xie.red/2021/01/12/netty-1/","toc":[{"id":"什么是netty","title":"什么是Netty","index":"1"},{"id":"最简单的一个例子","title":"最简单的一个例子","index":"2"}],"reading_time":"706 words in 5 min"}